---
title: "Forecasting the Growth rate in Residential housing across Danish Municapalities"
author: "Asger Ingemann Rasmussen"
format: pdf
editor: visual
---

```{r, include=FALSE}
library(readxl)
library(tidyverse)
library(fable)
library(tsibble)
library(mapDK)
library(plotDK)
library(gridExtra)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(seasonal)
library(tibble)
library(feasts)
library(doParallel)
library(xgboost)
```

```{r, include=FALSE}
### FULL DATA LOAD

### Mac #### setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Economic Forecasting/Project")
setwd("C:/Users/asger/OneDrive - Aarhus universitet/Economic Forecasting/House-Prices")

CPI <- read_excel("Data/Consumer price index (2015 = 100) Monthly National, General.xlsx", skip = 2) |> 
  rename(Index = "Consumer price index",
         Date = ...1) |> 
  filter(Index != is.na(Index)) |> 
  mutate(Date = seq(as.Date("1980-01-01"), as.Date("2024-01-01"), by = "1 month")) |> 
  mutate(Date = yearquarter(Date)) |> 
  group_by(Date) |> 
  summarise(Index = mean(Index)) |> 
  as_tsibble(key = "Index", index = "Date") |> 
  mutate(Index = round(Index, 2),
         Year = as.integer(substr(Date, start = 1, stop = 4)))

Ejendomspriser <- read_excel("Data/Ejendomspriser - Quarter 1992 - 2023 - Kommuner .xlsx", skip = 2) |> 
  select(-...1, -...2) |> 
  rename(Kommune = ...3) |> 
  mutate(across(-Kommune, as.numeric)) |> 
  pivot_longer(cols = "1992K1":"2023K3",
               names_to = "Date",
               values_to = "House_Price") |> 
  filter(!Kommune %in% c("Bornholm","Ærø","Læsø","Fanø","Samsø")) |> 
  mutate(Date = str_replace(Date, "K", "Q")) |> 
  mutate(Date = yearquarter(Date)) |> 
  group_by(Kommune) |> 
  as_tsibble(key = "Kommune", index = "Date") |> 
  left_join(CPI, by = "Date") |> 
  filter(Index != is.na(Index)) |> 
  mutate(House_Price_CPI = (House_Price / Index)*100,
         House_Price_CPI = round(House_Price_CPI,2),
         log_House_Price_CPI = log(House_Price_CPI)) |> 
  as_tibble() |> 
  group_by(Kommune) |> 
  mutate(Growth_rate = log_House_Price_CPI - lag(log_House_Price_CPI)) |> 
  ungroup() |> 
  as_tsibble(key = "Kommune", index = "Date")

Korrespondancetabel_Kommuner <- read_excel("Data/Korrespondancetabel Kommuner.xlsx")

Korrespondancetabel_Kommuner

Permits_Region_1993_2006 <- read_excel("Data/Permits Region 1993-2006.xlsx", skip = 2)

Permits_Region_1993_2006 = Permits_Region_1993_2006 |> 
  select(-...1,-...2,-...3) |> 
  rename(Kommune = ...4) |> 
  pivot_longer(cols = "1981":"2006",
               names_to = "Year",
               values_to = "Permits") |> 
  mutate(Kommune = if_else(Kommune == "Copenhagen", "København", Kommune)) |> 
  left_join(Korrespondancetabel_Kommuner, by = c("Kommune" = "AMT_KOM_TXT")) |> 
  filter(!is.na(NUTS_KODE)) |> 
  select(Year, Permits, NUTS_KODE) |> 
  mutate(Year = as.integer(Year)) |> 
  group_by(Year, NUTS_KODE) |> 
  mutate(Permits = sum(Permits)) |> 
  distinct(Year, NUTS_KODE, .keep_all = TRUE) |> 
  as_tsibble(key = "NUTS_KODE", index = "Year")

Permits_Region_2006_2024 <- read_excel("Data/Permits Region 2006-2024.xlsx", 
                                       skip = 2) 

Permits_Region_2006_2024 = Permits_Region_2006_2024 |> 
  select(-...1,-...2,-...3) |> 
  rename(Kommune = ...4) |> 
  pivot_longer(cols = "2006Q1":"2023Q4",
               names_to = "Year",
               values_to = "Permits") |> 
  mutate(Kommune = if_else(Kommune == "Copenhagen", "København", Kommune),
         Kommune = if_else(Kommune == "Lyngby-Taarbæk", "Lyngby-Tårbæk", Kommune)) |> 
  left_join(Korrespondancetabel_Kommuner, by = c("Kommune" = "NUTS_TXT")) |> 
  select(Year, Permits, NUTS_KODE) |> 
  mutate(Year = as.factor(substr(Year, 1,4)),
         Permits = Permits) |> 
  group_by(Year, NUTS_KODE) |> 
  summarise(Permits = sum(Permits, na.rm = TRUE)) |> 
  mutate(Year = as.character(Year),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "NUTS_KODE", index = "Year") |> 
  filter(Year != "2006")

Permits = Permits_Region_1993_2006 |> 
  bind_rows(Permits_Region_2006_2024)

Immigration_Region_1980_2005 <- read_excel("Data/Immigration Region 1980 - 2005.xlsx", 
                                           skip = 2)

Immigration_Region_1980_2005 = Immigration_Region_1980_2005 |> 
  rename(Kommune = ...1) |> 
  pivot_longer(cols = "1980":"2005",
               names_to = "Year",
               values_to = "Immigration") |> 
  mutate(Kommune = if_else(Kommune == "Copenhagen", "København", Kommune),
         Kommune = if_else(Kommune == "Lyngby-Taarbæk", "Lyngby-Tårbæk", Kommune)) |> 
  left_join(Korrespondancetabel_Kommuner, by = c("Kommune" = "NUTS_TXT")) |> 
  select(Year, Immigration, NUTS_KODE) |> 
  group_by(Year, NUTS_KODE) |> 
  summarise(Immigration = sum(Immigration, na.rm = TRUE)) |> 
  mutate(Year = as.character(Year),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "NUTS_KODE", index = "Year")

Immigration_Region_2006 <- read_excel("Data/Immigration Region 2006.xlsx", 
                                      skip = 2)

Immigration_Region_2006 = Immigration_Region_2006 |> 
  select(-...1) |> 
  rename(Kommune = ...2,
         Immigration = "2006") |> 
  mutate(Kommune = if_else(Kommune == "Copenhagen", "København", Kommune),
         Kommune = if_else(Kommune == "Lyngby-Taarbæk", "Lyngby-Tårbæk", Kommune),
         Year = as.integer(2006)) |> 
  left_join(Korrespondancetabel_Kommuner, by = c("Kommune" = "NUTS_TXT")) |> 
  select(Year, Immigration, NUTS_KODE) |> 
  distinct(Year, NUTS_KODE, .keep_all = TRUE) |> 
  as_tsibble(key = "NUTS_KODE", index = "Year")

Immigration_Region_2007_2023 <- read_excel("Data/Immigration Region 2007 - 2023.xlsx", 
                                           skip = 2)

Immigration_Region_2007_2023 = Immigration_Region_2007_2023 |> 
  rename(Kommune = ...1) |> 
  pivot_longer(cols = "2007":"2023",
               names_to = "Year",
               values_to = "Immigration") |> 
  mutate(Kommune = if_else(Kommune == "Copenhagen", "København", Kommune),
         Kommune = if_else(Kommune == "Lyngby-Taarbæk", "Lyngby-Tårbæk", Kommune),
         Year = as.integer(Year)) |> 
  left_join(Korrespondancetabel_Kommuner, by = c("Kommune" = "NUTS_TXT")) |> 
  select(Year, Immigration, NUTS_KODE) |> 
  distinct(Year, NUTS_KODE, .keep_all = TRUE) |> 
  as_tsibble(key = "NUTS_KODE", index = "Year")

Immigration = Immigration_Region_1980_2005 |> 
  bind_rows(Immigration_Region_2006) |> 
  bind_rows(Immigration_Region_2007_2023)

Disposable_Income <-  read_excel("Data/Disposable Income by region Yearly.xlsx", 
                                 skip = 2) |> 
  select(...3, ...4, "1 Disposable income (2+30-31-32-35)") |> 
  rename(Year = ...4,
         Disp_Income = '1 Disposable income (2+30-31-32-35)',
         Kommune = ...3) |> 
  fill(Kommune) |>
  filter(Disp_Income != is.na(Disp_Income)) |>
  mutate(Year = as.integer(Year)) |> 
  as_tsibble(index = Year, key = "Kommune") |>
  left_join(CPI |> 
              as_tibble() |> 
              select(Year, Index) |> 
              group_by(Year) |> 
              summarise(Index = mean(Index)), by = "Year") |> 
  mutate(Disp_Income_CPI = (Disp_Income / Index)*100,
         log_Disp_Income = log(Disp_Income),
         diff_log_Disp_Income = log_Disp_Income - lag(log_Disp_Income))

Consumer_Confidence <- read_excel("Data/Consumer Confidence - National Monthly.xlsx", 
                                     skip = 2) |> 
  rename(Consumer_Confidence = 'Consumer confidence indicator') |> 
  mutate(Date = seq(as.Date("1974-10-01"), as.Date("2024-02-01"), by = "1 month"),
         Date = yearquarter(Date)) |> 
  select(-...1) |> 
  group_by(Date) |> 
  mutate(Consumer_Confidence = as.integer(Consumer_Confidence)) |> 
  filter(Consumer_Confidence != is.na(Consumer_Confidence)) |> 
  summarise(Consumer_Confidence = mean(Consumer_Confidence)) |> 
  mutate(diff_Consumer_Confidence = Consumer_Confidence - lag(Consumer_Confidence)) |> 
  as_tsibble(index = "Date")

Construction_Cost_Index_1986_2015 <- read_excel("Data/Construction Cost Index 1986 - 2015.xlsx", 
                                                skip = 2) 
  
Construction_Cost_Index_1986_2015 = Construction_Cost_Index_1986_2015 |> 
  select(-...1,-...2,-...3) |> 
  pivot_longer(cols = "1986Q4":"2015Q4",
               names_to = "Date",
               values_to = "CCI") |> 
  mutate(CCI = CCI * (100 / 135.75),
         Date = yearquarter(Date)) |> 
  dplyr::slice(1:65) |> 
  as_tsibble(index = "Date")

CCI <- read_excel("Data/Construction cost index National Quarterly.xlsx", 
                  skip = 2) |> 
  select(-...1, -...2, -...3, -...4) |> 
  filter(`2003Q1` != is.na(`2003Q1`)) |> 
  pivot_longer(cols = "2003Q1":"2023Q4",
               names_to = "Date",
               values_to = "CCI") |> 
  mutate(Date = yearquarter(Date)) |>
  as_tsibble(index = "Date")
  
Construction_Cost_Index = Construction_Cost_Index_1986_2015 |> 
  bind_rows(CCI) |> 
  mutate(diff_CCI = CCI - lag(CCI))

Employmet_Rate <- read_excel("Data/Employmet Rate National Quarterly.xls", 
                                 skip = 10) |> 
  rename(Date = observation_date,
         Employment_Rate = LREM64TTDKQ156S) |> 
  mutate(Date = yearquarter(Date),
         diff_Employment_Rate = Employment_Rate - lag(Employment_Rate)) |> 
  as_tsibble(index = Date)

GDP <- read_excel("Data/GDP pr Capita Yearly National.xlsx", 
                      skip = 2) |> 
  select(-...1) |> 
  rename(Year = ...2,
         GDP = 'Pr. capita. Current prices, (1000 DKK.)') |> 
  mutate(Year = as.integer(Year)) |> 
  left_join(CPI |> 
              as_tibble() |> 
              select(Year, Index) |> 
              group_by(Year) |> 
              summarise(Index = mean(Index)), by = "Year") |> 
  filter(Year != is.na(Year)) |> 
  mutate(diff_GDP = GDP - lag(GDP)) |> 
  as_tsibble(index = Year)

Gross_Lending <- read_excel("Data/Mortgage Banks Gross Lending - Quarterly National.xlsx", 
                            skip = 2) |> 
  select(-...1,-...2) |> 
  rename(Date = ...3,
         Gross_Lending = "All loan types") |> 
  mutate(Date = yearquarter(Date),
         diff_Gross_Lending = Gross_Lending - lag(Gross_Lending)) |> 
  as_tsibble(index = "Date") |> 
  left_join(CPI, by = "Date") |>
  filter(Index != is.na(Index)) |>
  mutate(Real_Gross_Lending = (Gross_Lending / Index)) |>
  select(-Year, -Index)

column_names <- as.character(1993:2023)
Key_for_Regions <- read_excel("Data/Key for Regions.xlsx") |> 
  rename(Kom.nr = NUTS_KODE,
         Kommune = NUTS_TXT) |> 
  select(Kom.nr, Kommune) |> 
  distinct(Kom.nr, .keep_all = TRUE)


Grundskyld <- read_excel("Data/Grundskylds_Promille Regional Yearly.xlsx") |> 
  dplyr::slice(-c(1, 2,101:113)) |> 
  mutate(across(all_of(column_names), as.double)) |> 
  pivot_longer(cols = column_names,
               names_to = "Year",
               values_to = "Grundskyld") |> 
  select(-'2024') |> 
  left_join(Key_for_Regions, by = c("Kom.nr" = "Kom.nr")) |> 
  select(-...1) |> 
  mutate(Year = as.integer(Year),
         Kommune = case_when(Kom.nr == 715 ~ "Aarhus",
                             Kom.nr != 715 ~ Kommune)) |> 
  as_tsibble(key = "Kommune", index = Year)


Household <- read_excel("Data/Households per region Annualy.xlsx", 
                             skip = 2) |> 
  rename(Year = ...1) |> 
  mutate(Year = as.integer(Year)) |> 
  pivot_longer("Copenhagen":"Aalborg",
               names_to = "Kommune",
               values_to = "Households") |> 
  group_by(Kommune) |> 
  mutate(log_Households = log(Households),
         diff_log_Households = log_Households - lag(log_Households,1)) |> 
  as_tsibble(key = "Kommune", index = "Year")

Houses_for_sale_Region_2004_2020 <- read_excel("Data/Houses for sale Region 2004-2020.xlsx", 
                                               skip = 2)
Houses_for_sale_Region_2004_2020 = Houses_for_sale_Region_2004_2020 |> 
  select(-...1) |> 
  rename(Kommune = ...2) |> 
  pivot_longer(cols = "2004M01":"2020M12",
               names_to = "Month",
               values_to = "Houses_for_sale") |> 
  group_by(Kommune) |> 
  mutate(Date = seq(as.Date("2004-01-01"), as.Date("2020-12-01"), by = "1 month"),
                Date = yearquarter(Date)) |> 
  ungroup() |> 
  select(Kommune, Houses_for_sale, Date) |> 
  group_by(Kommune, Date) |> 
  mutate(Houses_for_sale = sum(Houses_for_sale)) |> 
  distinct(Kommune, Date, .keep_all = TRUE) |> 
  ungroup() |> 
  as_tsibble(key = "Kommune", index = "Date")

Houses_for_sale_Region_2021_2024 <- read_excel("Data/Houses for sale Region 2021-2024.xlsx", 
                                               skip = 2)

Houses_for_sale_Region_2021_2024 = Houses_for_sale_Region_2021_2024 |> 
  select(-...1) |> 
  rename(Kommune = ...2) |> 
  pivot_longer(cols = "2021M01":"2024M02",
               names_to = "Month",
               values_to = "Houses_for_sale") |> 
  group_by(Kommune) |> 
  mutate(Date = seq(as.Date("2021-01-01"), as.Date("2024-02-01"), by = "1 month"),
         Date = yearquarter(Date)) |> 
  ungroup() |> 
  select(Kommune, Houses_for_sale, Date) |> 
  group_by(Kommune, Date) |> 
  mutate(Houses_for_sale = sum(Houses_for_sale)) |> 
  distinct(Kommune, Date, .keep_all = TRUE) |> 
  ungroup() |> 
  as_tsibble(key = "Kommune", index = "Date")

Houses_for_sale = Houses_for_sale_Region_2004_2020 |> 
  bind_rows(Houses_for_sale_Region_2021_2024)

Population_raw <- read_excel("Data/Befolkning by Region 1993 - 2023.xlsx", 
                                             skip = 2)

Population <- Population_raw |> 
  select(-...1) |> 
  pivot_longer(, cols = "1993":"2024",
               names_to = "Year",
               values_to = "Population") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Density_raw <- read_excel("Data/Befolknings Tæthed by Region 1993 - 2023.xlsx",
                          skip = 2)

Density <- Density_raw |> 
  select(-...1, -"2024") |> 
  pivot_longer(, cols = "1993":"2023",
               names_to = "Year",
               values_to = "Density") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Andel_Ejerboliger_raw <- read_excel("Data/Andel Ejerboliger Region Yearly 1993-2024.xlsx", 
              skip = 2)

Andel_Ejerboliger <- Andel_Ejerboliger_raw |> 
  mutate('2010' = as.double('2010')) |> 
  select(-...1, -"2024", -"2022", -"2023") |> 
  pivot_longer(, cols = "1993":"2021",
               names_to = "Year",
               values_to = "Andel_Ejerboliger") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Anmeldte_indbrud_raw <- read_excel("Data/Anmeldte indbryd Region Yearly 1993-2024.xlsx", 
           skip = 2)

Anmeldte_indbrud <- Anmeldte_indbrud_raw |> 
  select(-...1, -"2024", -"2023") |> 
  pivot_longer(, cols = "1993":"2022",
               names_to = "Year",
               values_to = "Anmeldte_indbrud") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Anmeldte_voldsforbrydelser_raw <- read_excel("Data/Anmeldte voldsforbrydelser Region Yearly 1993-2024.xlsx", 
              skip = 2)

Anmeldte_voldsforbrydelser <- Anmeldte_voldsforbrydelser_raw |> 
  mutate(across(matches('^(199[3-9]|20[0-1][0-9]|202[0-3])$'), as.double))|> 
  select(-...1, -"2024", -"2023") |> 
  pivot_longer(, cols = "1993":"2022",
               names_to = "Year",
               values_to = "Anmeldte_voldsforbrydelser") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Price_to_Income_Ratio_raw <- read_excel("Data/Price to Income Ratio - National Quarterly.xlsx", 
                                        skip = 5)

Price_to_Income_Ratio <- Price_to_Income_Ratio_raw |> 
  select(...3) |> 
  rename(PTIR = ...3) |> 
  filter(PTIR != is.na(PTIR)) |> 
  mutate(Date = seq(as.Date("1981-01-01"), as.Date("2023-09-01"), by = "1 quarter"),
         Date = yearquarter(Date),
         diff_PTIR = PTIR - lag(PTIR)) |> 
  as_tsibble(index = Date)

Price_to_Rent_ratio_raw <- read_excel("Data/Price to Rent ratio National Quarterly.xlsx", 
                                      skip = 5)

Price_to_Rent_ratio <- Price_to_Rent_ratio_raw |> 
  select(-...2,-...4) |> 
  rename(PTRR = ...3) |> 
  filter(PTRR != is.na(PTRR)) |> 
  mutate(Date = seq(as.Date("1970-01-01"), as.Date("2023-08-08"), by = "1 quarter")) |> 
  select(PTRR, Date) |> 
  mutate(Date = yearquarter(Date),
         diff_PTRR = PTRR - lag(PTRR)) |> 
  as_tsibble(index = Date)

Rent_Prices_raw <- read_excel("Data/Rent Prices National Quarterly.xlsx", 
                              skip = 5)

Rent_Prices <- Rent_Prices_raw |> 
  select(-...2,-...4) |> 
  rename(Rent_Price = ...3) |> 
  filter(Rent_Price != is.na(Rent_Price)) |> 
  mutate(Date = seq(as.Date("1967-01-01"), as.Date("2024-01-01"), by = "1 quarter")) |> 
  select(Rent_Price, Date) |> 
  mutate(Date = yearquarter(Date),
         diff_Rent_Price = Rent_Price - lag(Rent_Price)) |> 
  as_tsibble(index = Date)

Vacancy_raw <- read_excel("Data/Vacant dwellings Regional Yearly.xlsx", 
                          skip = 2)

Vacant_Houses <- Vacancy_raw |> 
  select(-...1) |> 
  rename(Kommune = ...2) |> 
  filter(Kommune != is.na(Kommune)) |> 
  pivot_longer(cols = "2010":"2023",
               names_to = "Year",
               values_to = "Vacant_Houses") |> 
  group_by(Kommune) |> 
  mutate(Year = as.integer(Year),
         diff_Vacant_Houses = Vacant_Houses - lag(Vacant_Houses)) |> 
  ungroup() |> 
  as_tsibble(key = "Kommune", index = "Year")

Kommune_ID <- read_excel("Data/Kommune-ID.xlsx") |> 
  rename(Kommune = Kommune...1,
         Kommune_2 = Kommune...3)

Udskrivningsprocent_raw <- read_excel("Data/Udskrivningsprocent Region Yearly 1993-2024.xlsx", 
                                                          skip = 2)

Udskrivningsprocent <- Udskrivningsprocent_raw |> 
  select(-...1, -"2024") |> 
  filter(!is.na(Kom.nr)) |> 
  mutate(across(where(is.character), as.numeric)) |> 
  pivot_longer(, cols = "1993":"2023",
               names_to = "Year",
               values_to = "Udskrivningsprocent") |> 
  mutate(Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Udgift_til_dagtilbud_raw <- read_excel("Data/Udgift til dagtilbud Region Yearly 1993-2024.xlsx", 
                                                           skip = 2)

Udgift_til_dagtilbud <- Udgift_til_dagtilbud_raw |> 
  select(-...1, -"2024") |> 
  filter(!is.na(Kom.nr)) |> 
  mutate(across(where(is.character), as.numeric)) |> 
  pivot_longer(, cols = "1993":"2023",
               names_to = "Year",
               values_to = "Udgift_til_dagtilbud") |> 
  mutate(Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Socioøkonomiske_indeks_raw <- read_excel("Data/Socioøkonomiske indeks Region Yearly 1996-2024.xlsx",
                                         skip = 2)

Socioøkonomiske_indeks <- Socioøkonomiske_indeks_raw |> 
  select(-...1, -"2024") |> 
  filter(!is.na(Kom.nr)) |> 
  mutate(across(where(is.character), as.numeric)) |> 
  pivot_longer(, cols = "1993":"2023",
               names_to = "Year",
               values_to = "Socioøkonomiske_indeks") |> 
  mutate(Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Realkreditudlån_1993_2013 <- read_excel("Data/Realkreditudlån 1993-2013 Monthly.xlsx", 
                                                skip = 2)

Realkreditudlån_1 = Realkreditudlån_1993_2013 |> 
  select(-...1, -...2, -...3) |> 
  rename("Month" = '...4',
         'Udlån' = 'Alle løbetider/uspecificeret') |> 
  filter(!is.na(Udlån)) |> 
  mutate(Date = seq(as.Date("1993-01-01"), as.Date("2013-10-01"), by = "1 month"),
                  Date = yearquarter(Date)) |> 
  select(-Month)

Realkreditudlån_2013_2023 <- read_excel("Data/Realkreditudlån 2013 - 2023 Monthly.xlsx", 
                                        skip = 2)
  
Realkreditudlån_2 = Realkreditudlån_2013_2023 |> 
  select(-...1, -...2, -...3, -...4, -...5, -...6) |> 
  rename("Month" = '...7',
         'Udlån' = 'I alt') |> 
  filter(Udlån != '..') |> 
  mutate(Date = seq(as.Date("2013-10-01"), as.Date("2022-12-01"), by = "1 month"),
         Date = yearquarter(Date),
         Udlån = as.double(Udlån)) |> 
  select(-Month)

Realkreditudlån_2022_2024 <- read_excel("Data/Realkreditudlån 2022 - 2024 Monthly.xlsx", 
                                                skip = 2)

Realkreditudlån_3 = Realkreditudlån_2022_2024 |> 
  select(-...1, -...2, -...3, -...4, -...5, -...6) |> 
  rename("Month" = '...7',
         'Udlån' = `Ejerbolig og fritidshuse`) |> 
  filter(Udlån != '..') |> 
  mutate(Date = seq(as.Date("2022-12-01"), as.Date("2024-02-01"), by = "1 month"),
         Date = yearquarter(Date)) |> 
  select(-Month)
  
Realkreditudlån = Realkreditudlån_1 |> 
  bind_rows(Realkreditudlån_2) |> 
  bind_rows(Realkreditudlån_3) |> 
  group_by(Date) |>
  summarise(Udlån = mean(Udlån)) |> 
  as_tsibble(index = "Date")

Interest_rates = read_excel("Data/Udlåns rente Monthly.xlsx", 
                                     skip = 2) |> 
  select(-...1,-...2) |>
  rename(Rate = Månedsultimo) |>
  filter(Rate != "..") |>
  mutate(Date = seq(as.Date("1992-4-01"), as.Date("2024-02-01"), by = "1 month"),
                  Date = yearquarter(Date)) |>
  mutate(Rate = as.double(Rate)) |>
  filter(Rate != is.na(Rate)) |>
  group_by(Date) |>
  summarise(Rate = mean(Rate)) |>
  mutate(diff_Rate = Rate - lag(Rate)) |>
  as_tsibble(index = "Date") |>
  left_join(CPI, by = "Date") |>
  filter(Index != is.na(Index)) |>
  mutate(Real_Rate = (Rate / Index)) |>
  select(-Year, -Index)


Ejendomspriser <- Ejendomspriser |> 
  left_join(Key_for_Regions, by = "Kommune") |> 
  mutate(Kom.nr = case_when(Kommune == "Århus" ~ 751,
                            Kommune != "Århus" ~ Kom.nr)) |> 
  left_join(Kommune_ID |> select(Kommune_2, Kom.nr), by = "Kom.nr") |> 
  left_join(Disposable_Income, by = c("Kommune_2" = "Kommune", "Year")) |> 
  left_join(Consumer_Confidence, by ="Date") |> 
  left_join(Construction_Cost_Index, by = "Date") |> 
  left_join(Employmet_Rate, by = "Date") |> 
  left_join(GDP, by = "Year") |> 
  left_join(Gross_Lending, by = "Date") |>
  left_join(Grundskyld, by = c("Kommune", "Year")) |> 
  left_join(Household, by = c("Kommune_2" = "Kommune", "Year")) |> 
  left_join(Houses_for_sale, by = c("Kommune", "Date")) |>
  left_join(Immigration, by = c("Year", "Kom.nr.x" = "NUTS_KODE")) |>
  left_join(Population, by = c("Kom.nr.x" = "Kom.nr", "Year")) |>
  left_join(Price_to_Income_Ratio, by = "Date") |>
  left_join(Vacant_Houses, by = c("Kommune_2" = "Kommune", "Year")) |>
  left_join(Price_to_Rent_ratio, by = "Date") |>
  left_join(Rent_Prices, by = "Date") |> 
  left_join(Anmeldte_voldsforbrydelser, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Anmeldte_indbrud, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Andel_Ejerboliger, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Density, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Udskrivningsprocent, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Udgift_til_dagtilbud, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Socioøkonomiske_indeks, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Realkreditudlån, by = "Date") |> 
  left_join(Interest_rates, by = "Date") |> 
  left_join(Permits, by = c("Year", "Kom.nr.x" = "NUTS_KODE")) |> 
  select(-Index.y, -Index.x, -Kom.nr.y)
```

# Introduction

The goal of this paper is to forecast real growth in house prices for municipalities in Denmark. Roughly 58% of adult population of Denmark are home owners during their lifetime, for most of these home owners their housing asset and mortgage makes up a dominant portion of their wealth and financial portfolio. Housing is primarily financed by mortgage banks, either through a fixed rate or adjustable rate loans.[^1] Specifically this study seeks to forecast growth in housing prices using a simple Autoregressive (AR) model benchmark alongside an Autoregressive distributed (ARDL) lag model using Economic variables motivated by historical evidence, against a modern machine learning approach using the framework of XGBoost, which has been one of the best performing machine learning methods for forecasting house prices. [^2]

[^1]: https://academic.oup.com/jeea/article/19/1/403/5810063?guestAccessKey=8e7a8309-29cf-494d-988f-ef362c409418&login=false

[^2]: https://www.mdpi.com/2813-2203/3/1/3

The primary motivation for this study is the National Bankens paper from 2021 *"Housing Market Robustness Should be Strengthened",* highlighting the importance of forecasting the growth in house prices. The paper highlights how the Covid-19 pandemic lead to rapid demand increases for housing, despite the general economic downturn resulting in large increases in property prices across Denmark. Specifically the urban regions such as Copenhagen and Aarhus experienced significant growth in both property prices, and lending activity. This highlights the regional disparities observed between urban and rural municipalities, in the case of property prices. In general these rapid price increases outpaces the growth rate of the income level for the average dane, raising concerns for the stability of the housing market, as households take on larger level of debt to finance their purchase of property alongside an increased speculative behavior by investors and individuals at the prospect of future growth in the property market. National Banken highlights these factors, as the driving force for the increased the possibility of a strong market correction in the property market.

This study does not seek to forecast the property market as a whole, but selectively the residential property market of single family homes. The property market is characterized by large heterogeneity, as properties are valued based on location and its physical properties which differs significantly both between regions and within regions. Because of the infrequent nature of property sales it is not feasible to obtain prices on individual properties, instead this study focuses on the aggregate $m^2$ prices on a municipality level. Denmark is made up of 98 different municipalities, over the last 12 years 68 municipalities have seen an increase in their population while 30 have seen a decrease, the general trend is that municipalities within the capital area has seen the largest growth in population while municipalities in Jutland and Fyn has experienced smaller or negative growth. A working paper by the National Bank in 2017 with the goal of understanding the regional model for the danish housing market, found that regional fundamentals are the dominant determined for real estate prices in the long run, where as the short term is mostly explained by the "ripple effect" where a increase in one region impacts prices in neighbouring regions, the goal of this paper is to forecast the long-term growth in house prices, cross regional impact is omitted, and will be focusing on the regional fundamentals as the primary source of predicting power for prices.

Past literature has found compelling evidence that economic variables are associated with growth in house prices. Historic papers such as (Case, Shiller 1990)[^3] found that rent prices, construction cost, population and housing starts are significant for explaining excess returns in real estate. (Abraham, Hendershott 1996) and (DiPasquale, Wheaton1994) find similar findings. Historicaly models have been split into structural and non structural models, a quick overview of notable papers on the topic of forecasting house prices.

[^3]: https://www.nber.org/system/files/working_papers/w3368/w3368.pdf

1.  (Campbell, Davis, Gallin, Martin 2010) work within the framework of the dynamic Gordon growth treating real estate as a purely financial asset akin to the stock market. They make use of a bayesian VAR model to forecast the rent-price ratio and housing premium, finding substantial evidence for their respective predictability.

2.  (Case, Shiller 1990) forecast real estate prices and excess returns, make use of a structural model looking at theoretical economic variables and their effect on prices, their simple model has laid much of the groundwork for future work.

3.  (Rapach, Strauss 2009) expands on (Case, Shiller) structural model by forecasting across US states, making use of an ARDL framework alongside combination forecast. The ARDL model presented in this paper is build up on the model presented in this paper.

# Data set

## House Prices

Regional house prices are obtained from "Finans Danmark", consist of quarterly observations for 1992Q1:2023Q4 prices are collected from the Real-ViewTM database, which purpose is to document market price from realized sales of properties on the open market by professional brokers. Prices are calculated as $m^2$ for the individual property, for the portal district and the municipality as a whole, using a summation of the individual properties $m^2$ price divided by the number of sales in that region. Prices are calculated four times a year to ensure the reliability and robustness of the reported data. The nomial $m^2$ prices are then converted into real terms, using the (CPI) deflator from Danmark statistik, with 2015 serving as the base year. The computed quarterly growth rates are calculated as the differences in the log levels of real housing prices for each region. The quarterly real housing price growth rates are plotted in Figure 1.

```{r echo=FALSE, warning=FALSE}

#| label: average-growth rate
#| fig-cap: "Average growth rate for real m2 prices in Denmark"

Ejendomspriser %>%
  as.tibble() %>%
  group_by(Date) %>%
  summarise(Growth_rate = mean(Growth_rate)) %>%
  ggplot(aes(x = Date, y = Growth_rate)) +
  geom_line(linetype = "dashed", alpha = 0.8, color = "black") + # Overall growth rate
  geom_line(data = Ejendomspriser %>%
              filter(Kommune %in% c("København", "Kalundborg")),
            aes(x = Date, y = Growth_rate, col = Kommune)) +
  scale_color_manual(values = c("København" = "#66C2A5", "Kalundborg" = "#FC8D62")) + # Specify colors
  labs(
    title = "Real Housing Price Growth Rate",
    x = "",
    y = "Growth Rate"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    legend.text = element_text(size = 10),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12),
    plot.title = element_text(size = 14, face = "bold")
  )

```

The blacked dashed line indicates the average real growth rates for house prices in all municipalities, this seems to indicate that housing price changes in locations are subject to similar market forces and economic conditions, while still maintaining heterogeneity between them.

## Variables

For our structural forecast I consider 19 potential predictors of real housing price growth for each municipality, these predictors have been transformed by differentiating and/or deflating them by the (CPI) when deemed appropriate in an effort to make them stationary. The predictors are split up into national level economic variables or municipality level economic variables.

Out of the nineteen potential predictors nine of them are **national level** economic variables:

-   Real Interest rate (*Nationalbank offical lending rate by end of month, discounted by CPI and summarized quarterly, diff*)

-   Consumer confidence (*Statisk Denmark monthly survey comprising the perceived economic situation, summarized quarterly, diff)*

-   Construction cost index *(Statisk Denmark construction cost index for residential buildings total, quarterly, diff)*

-   Employment rate *(FRED Employment rate aged 15-64 all persons for Denmark, yearly, diff)*

-   GDP Pr. capita *(Statisk Denmark in 1000 DKK current prices, yearly, diff)*

-   Real Gross Lending *(Nationalbank Gross lending by mortgage banks for all property types deflated by CPI in bn DKK, quarterly, diff)*

-   Price to Income ratio *(OECD Analytical house prices indicators for Denmark, seasonal adjusted, quarterly, diff)*

-   Price to Rent ratio *(OECD Analytical house prices indicators for Denmark, seasonal adjusted, quarterly, diff)*

-   Rent price index *(OECD Analytical house prices indicators for Denmark, seasonal adjusted, quarterly, diff)*

Real interest rate serves as an indication for cost of borrowing, as the long term and short term mortgage rents follow it closely, this has been deflated by CPI. Consumer confidence is an indication of the general economic perspective in the country, and include measures of intention of pruchasing or building a home. Including real gross lending they serve as way to predict the demand for housing. The construction cost index purpose is reflect the cost of housing construction in Denmark, used primarily by construction organizations and housing developers, alongside Price to Rent ratio they serve as an indication for the supply side of housing in Denmark. Employment rate and GDP Pr. Capita is general macro economic indicators for the danish economy.

The remaining ten variables are **municipality level** economic variables:

-   Disposable income *(Statisk Denmark disposable income for municipalities, log, yearly, diff)*

-   Land tax *(Municipality keynumbers tax rate on land, yearly)*

-   Income tax rate *(Municipality keynumbers income tax rate for municipality, yearly)*

-   Immigration *(Municipality keynumbers number of immigrants log, yearly)*

-   Population *(Municipality keynumbers population log, yearly, diff)*

-   Reported violent crimes *(Municipality keynumbers population, yearly)*

-   Reported burglaries *(Municipality keynumbers population, yearly)*

-   Density *(Municipality keynumbers population, yearly)*

-   Permits *(Denmark Statistik new housing permits, yearly)*

-   Socioeconomic index *(Municipality keynumbers population log, yearly, diff)*

Numerical disposable income which has been deflated the CPI to be Real Disposable income and population approximate demand for housing within municipalities. To account for supply of housing I make use of permits for new residential housing within region. Land tax, income tax rate, density, socioeconomic index and reported crimes accounts for the general economic structure within municipalities to account for the heterogeneity between them. Figure 2 shows data availability for all listed variables for a single municipality, two variables raise concerns namely socioeconomic index and employment rate.

```{r echo=FALSE, warning=FALSE}

#| label: Data-availability-over-time
#| fig-cap: "Data availability over time by municipality"

data_availability <- Ejendomspriser |> 
  as.tibble() |> 
  group_by(Kommune) |> 
  select(-Kommune_2, -Kom.nr.x,
         -Vacant_Houses, -Index, -House_Price_CPI, -Disp_Income_CPI,
         -Andel_Ejerboliger, -Houses_for_sale) |> 
  rename("Income tax" = Udskrivningsprocent,
         "Mortgage lending" = Udlån,
         "Day care services" = Udgift_til_dagtilbud,
         "Socioeconomic index" = Socioøkonomiske_indeks,
         "Rent price index" = Rent_Price,
         "Interest rate" = Rate,
         "Price to rent ratio" = PTRR,
         "Price to income ratio" = PTIR,
         "Real house price" = House_Price,
         "Real growth rate" = Growth_rate,
         "Gross mortgage lending" = Gross_Lending,
         "GDP pr capita" = GDP,
         "Employment rate" = Employment_Rate,
         "Real disposable income" = Disp_Income,
         "Consumer confidence" = Consumer_Confidence,
         "Construction cost index" = CCI,
         "Reported violentcrimes" = Anmeldte_voldsforbrydelser,
         "Reported burglaries" = Anmeldte_indbrud) |> 
  gather(key = "variable", value = "value", c(-Date, -Kommune))  |> 
  group_by(Kommune, Date, variable) %>%
  summarise(has_data = !any(is.na(value)))

availability_wide <- data_availability %>%
  pivot_wider(names_from = variable, values_from = has_data)

availability_long <- availability_wide |> 
  filter(Kommune == "København") |> 
  pivot_longer(cols = -c(Date, Kommune), names_to = "variable", values_to = "availability")

availability_long %>%
  filter(!grepl("^log|^diff", variable)) %>%
  ggplot(aes(x = Date, y = variable)) +
  geom_tile(aes(fill = availability), width = .9, height = .9) +  # Use tile for background
  geom_line(aes(group = variable, color = availability), size = 2) +  # Add lines
  scale_fill_manual(values = c("TRUE" = "#FC8D62", "FALSE" = "grey")) +
  scale_color_manual(values = c("TRUE" = "#FC8D62", "FALSE" = "darkgrey")) +  # Optional: Adjust line colors to match fill
  labs(title = "Data availability over time by municipality",
       x = "",
       y = "",
       fill = "Available",
       color = "Available") +  # Add color legend title if needed
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1),
        strip.text.x = element_text(angle = 0),
        strip.background = element_blank(),
        legend.position = "bottom",
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())
```

# Method

### Forecasting period

The dataset on real growth in house prices spans from 1992Q1 to 2023Q4 amounting to 124 individual observations, a fairly modest number of observations which spans across three decades.

Assessing the accuracy of our models require us to split our data into an initial training period for training our model, and a testing period to test the accuracy of our model on data is has not seen. For this purpose I will make use of a expanding window, because of the long run dynamics of prices on real estate and the modest number of observation present, this is favorable over a rolling window. A expanding window works by choosing an initial training period, for this paper "20" was chosen accounting for five years of data, after training the model on the initial period a one step ahead forecast is produced. Expanding the window by the next observation a new model is trained, and a new one step ahead forecast is produced, this patterns continuous until the last observation is reached, in our case this would be 2023Q4. This method is done for all produced models to assure the best model is chosen.

### AR

Auto regressive (AR) models are a simple framework using lags of the variable of interest to account for serial correlation within a timeseries. In this context they are mainly used as a benchmark to compare more complex models against. The general idea is that if added complexity does not increase forecasting accuracy sufficiently, a simpler and less complex model is preferred.

A big decision about the quantity of models to choose, the data set contains 93 danish municipalities. Each of these municipalities is there own time series for which one can model and forecast, the question becomes if one should run a single model for all municipalities or model 93 specific models.

Because of the long cyclical behavior an extending window is used over a rolling window for forecasting. There is three general models the first is a simple baseline model used as a comparison for more complex models, for the baseline model an auto regressive model is chosen, the general idea is to see how well past growth in house prices are able to forecast future house prices. The second model is a theoretical model encompassing explanatory variables motivated by historical papers forecasting house prices for this model a VAR model is chosen. Lastly a model making use as a state of the art machine learning, here a model with and without explanatory variables to see the general performance here XGBoost will be used.

```{r}

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |>
  autoplot() +
  theme_minimal() +
  labs(
    y = "",
    x = ""
  )

```

```         
```

A visual analysis of figure 1 indicates that since 1992 the average growth rate has been between 6% and minus 6% quarter to quarter.

```{r echo=FALSE, warning=FALSE}
#| label: average-growth rate decomposition
#| fig-cap: "STL decomposition of the average growth rate for real m2 prices in Denmark"

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  model(stl = STL(Growth_rate)) |> 
  components() |> 
  autoplot() +
  theme_minimal() +
  labs(
    title = "",
    subtitle = "",
    x = ""
  )

```

Visual inspection implies a seasonality in real growth rates. Trend is constant over time, this implies the need of accounting for seasonality in our proposed models.

```{r echo=FALSE, warning=FALSE}
#| label: growth rate trend and season
#| fig-cap: "Real growth rates seasonaly adjusted (red) and trend (black)"

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  model(stl = STL(Growth_rate)) |> 
  components() |> 
  ggplot(aes(x = Date)) +
  geom_line(aes(y = season_adjust), col = "red") +
  geom_line(aes(y = Growth_rate), alpha = .4) +
  geom_line(aes(y = trend)) +
  theme_minimal() +
  labs(
    y = "",
    x = ""
  )

```

```{r}

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  features(Growth_rate, unitroot_kpss)
```

From the augmented Dickey Fueller test, we can statistically reject the null hypothesis, and conclude that our Growth_rate are stationary.

```{r}
Ejendomspriser |> 
  features(Growth_rate, unitroot_kpss)
```

The same results holds for each individual time series. Let us take a look at the autocorrelation, and partial autocorrelation of our series.

```{r}

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  ACF(Growth_rate) |> 
  autoplot()

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  PACF(Growth_rate) |> 
  autoplot()
  

```

From the our ACF plot we see a fast decrease from the first, lag to the fourth lag. This is not exactly as exponential as one might expect, ad we see that lag 14 and 18 are significant as well. The PACF is significant at the first lag and nearly not significant. With the idea of making a model as a simple as possible, an ARIMA(4,0,0) model seems relatively appropriate.

```{r}

Ejendomspriser |> 
  filter(Kommune == "København") |> 
  ACF(Growth_rate) |> 
  autoplot()

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  PACF(Growth_rate) |> 
  autoplot()
```

# Forecast

Let us do our first forecast, for this we will be making use of a extending window.

```{r}


W = 30
i = 0
j = 
E = Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  nrow()

Ejendomspriser_tbl <- Ejendomspriser %>%
    as_tibble() %>%
    group_by(Date) %>%
    summarise(Growth_rate = mean(Growth_rate, na.rm = TRUE)) %>%
    filter(!is.na(Growth_rate)) %>%
    as_tsibble(index = Date)

fc <- vector("list", length = E-W)

for(i in 2:(E-W)) {
    fc[[i]] <- Ejendomspriser_tbl %>%
        dplyr::slice(1:(W+i-1)) %>%
        model(ARMA_400 = ARIMA(Growth_rate ~ pdq(4,0,0)),
              ARMA_100 = ARIMA(Growth_rate ~ pdq(1,0,0))) %>%
        forecast(h = 1) %>%
        as_tibble()
}

fc_combined <- bind_rows(fc)

fc_combined |> 
  bind_cols(Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  dplyr::slice((W+1):E) |> 
  select(Growth_rate)) |> 
  rename(Truth = Growth_rate...5,
         Forecast = .mean) |> 
  select(.model, Forecast, Truth) |> 
  yardstick::rmse(Truth, Forecast)

```

```{r echo=FALSE, warning=FALSE}

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  ACF(Growth_rate, 12) |> 
  ggplot(aes(x = lag, y = acf)) +
  geom_point()

```

```{r}

W = 30
i = 0
j = 
E = Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  nrow()

fc <- vector("list", length = E-W)

for(i in 1:(E-W)) {
  
  fc[[i]] <- Ejendomspriser |> 
  group_by(Kommune) |> 
  dplyr::slice(1:(29+i)) |> 
  ungroup() |> 
  filter(!is.na(Growth_rate)) |> 
  select(Kommune, Date, Growth_rate) |> 
  as_tsibble(key = Kommune, index = Date) |>
  model(ARIMA_400 = ARIMA(Growth_rate ~ pdq(3,0,0) + PDQ(0,0,0))) |> 
  forecast(h = 1) |> 
  as_tibble()
  
}


```

RMSE for every single municipality using an extending window and the model ARIMA(3,0,0)

```{r}

fc <- bind_rows(fc) |> 
  arrange(Kommune, Date)

fc <- left_join(fc, Ejendomspriser |> select(Kommune, Date, Growth_rate), by = c("Kommune", "Date")) |> select(Kommune, .model, Date, .mean, Growth_rate.y)

fc |> 
  select(Kommune,.mean, Growth_rate.y) |> 
  group_by(Kommune) |> 
  yardstick::rmse(Growth_rate.y, .mean)

```

Let us try to compare two different models, both are ARMA models

```{r}

registerDoParallel(cores = 6)

W <- 30
E <- Ejendomspriser %>% filter(Kommune == "Aabenraa") %>% nrow()

# Prepare a list to store the forecasts
fc <- vector("list", length = E-W)

# Use foreach to iterate in parallel
fc <- foreach(i = 1:(E-W), .packages = c("dplyr", "tsibble", "fable", "fabletools")) %dopar% {
  Ejendomspriser %>% 
    group_by(Kommune) %>% 
    dplyr::slice(1:(29+i)) %>% 
    ungroup() %>% 
    filter(!is.na(Growth_rate)) %>% 
    select(Kommune, Date, Growth_rate) %>% 
    as_tsibble(key = Kommune, index = Date) %>%
    model(ARIMA_400 = ARIMA(Growth_rate ~ pdq(3,0,0) + PDQ(0,0,0)),
          ARIMA_100 = ARIMA(Growth_rate ~ pdq(1,0,0) + PDQ(0,0,0))) %>% 
    forecast(h = 1) %>% 
    as_tibble()
}

```

```{r}

fc <- bind_rows(fc) |> 
  arrange(Kommune, Date)

fc <- left_join(fc, Ejendomspriser |> select(Kommune, Date, Growth_rate), by = c("Kommune", "Date")) |> select(Kommune, .model, Date, .mean, Growth_rate.y)

fc |> 
  select(Kommune,.model, .mean, Growth_rate.y) |> 
  group_by(Kommune, .model) |> 
  yardstick::rmse(Growth_rate.y, .mean)

fc |> 
  select(Kommune,.model, .mean, Growth_rate.y) |> 
  group_by(Kommune, .model) |> 
  yardstick::rmse(Growth_rate.y, .mean) |> 
  ungroup() |> 
  select(.model, .estimate) |> 
  mutate(.model = as.factor(.model)) |> 
  group_by(.model) |> 
  summarise(RMSE_mean = mean(.estimate))

```

Interestingly it seems that the RMSE seems to be lower for the ARIMA_100 model. But now we have a way to run the model on all of my time series and then compare which performs the best! Let us try with a VAR model. Let us take a look at our explanatory variables, and see which one has data available.

```{r}

data_availability <- Ejendomspriser %>%
  gather(key = "variable", value = "value", -date) %>%
  group_by(date, variable) %>%
  summarise(has_data = !any(is.na(value)))

# Pivot wider to see a more intuitive format with dates as rows and variables as columns
availability_wide <- data_availability %>%
  pivot_wider(names_from = variable, values_from = has_data)

# Print the dates and their corresponding data availability for each variable
print(availability_wide)
```

```{r}

registerDoParallel(cores = 6)

W <- 30
E <- Ejendomspriser %>% filter(Kommune == "Aabenraa") %>% nrow()

# Prepare a list to store the forecasts
fc_var <- vector("list", length = E-W)

# Use foreach to iterate in parallel
fc_var <- foreach(i = 1:(E-W), .packages = c("dplyr", "tsibble", "fable", "fabletools")) %dopar% {
  Ejendomspriser %>% 
    group_by(Kommune) %>% 
    dplyr::slice(1:(29+i)) %>% 
    ungroup() %>% 
    filter(!is.na(Growth_rate)) %>% 
    as_tsibble(key = Kommune, index = Date) %>%
    model(VAR = VAR(vars(Growth_rate, diff_Rate, diff_log_Disp_Income))) %>% 
    forecast(h = 1) %>% 
    as_tibble()
}


```

Let us do some XGBoost baby!

# Conclusion

asdasd

```{r}
#| echo: false
2 * 2
```
