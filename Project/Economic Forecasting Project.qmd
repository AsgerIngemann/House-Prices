---
title: "Forecasting the Growth rate in Residential housing across Danish Municapalities"
author: "Asger Ingemann Rasmussen"
format: pdf
editor: visual
---

```{r, include=FALSE}
library(readxl)
library(tidyverse)
library(fable)
library(tsibble)
library(mapDK)
library(plotDK)
library(gridExtra)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(seasonal)
library(tibble)
library(feasts)
library(doParallel)
```

```{r, include=FALSE}
### FULL DATA LOAD

### Mac #### setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Economic Forecasting/Project")
setwd("C:/Users/asger/OneDrive - Aarhus universitet/Economic Forecasting/House-Prices")

CPI <- read_excel("Data/Consumer price index (2015 = 100) Monthly National, General.xlsx", skip = 2) |> 
  rename(Index = "Consumer price index",
         Date = ...1) |> 
  filter(Index != is.na(Index)) |> 
  mutate(Date = seq(as.Date("1980-01-01"), as.Date("2024-01-01"), by = "1 month")) |> 
  mutate(Date = yearquarter(Date)) |> 
  group_by(Date) |> 
  summarise(Index = mean(Index)) |> 
  as_tsibble(key = "Index", index = "Date") |> 
  mutate(Index = round(Index, 2),
         Year = as.integer(substr(Date, start = 1, stop = 4)))

Ejendomspriser <- read_excel("Data/Ejendomspriser - Quarter 1992 - 2023 - Kommuner .xlsx", skip = 2) |> 
  select(-...1, -...2) |> 
  rename(Kommune = ...3) |> 
  mutate(across(-Kommune, as.numeric)) |> 
  pivot_longer(cols = "1992K1":"2023K3",
               names_to = "Date",
               values_to = "House_Price") |> 
  filter(!Kommune %in% c("Bornholm","Ærø","Læsø","Fanø","Samsø")) |> 
  mutate(Date = str_replace(Date, "K", "Q")) |> 
  mutate(Date = yearquarter(Date)) |> 
  group_by(Kommune) |> 
  as_tsibble(key = "Kommune", index = "Date") |> 
  left_join(CPI, by = "Date") |> 
  filter(Index != is.na(Index)) |> 
  mutate(House_Price_CPI = (House_Price / Index)*100,
         House_Price_CPI = round(House_Price_CPI,2),
         log_House_Price_CPI = log(House_Price_CPI)) |> 
  as_tibble() |> 
  group_by(Kommune) |> 
  mutate(Growth_rate = as.numeric((House_Price_CPI - lag(House_Price_CPI)) / lag(House_Price_CPI))) |> 
  ungroup() |> 
  as_tsibble(key = "Kommune", index = "Date")

Korrespondancetabel_Kommuner <- read_excel("Data/Korrespondancetabel Kommuner.xlsx")

Korrespondancetabel_Kommuner

Permits_Region_1993_2006 <- read_excel("Data/Permits Region 1993-2006.xlsx", skip = 2)

Permits_Region_1993_2006 = Permits_Region_1993_2006 |> 
  select(-...1,-...2,-...3) |> 
  rename(Kommune = ...4) |> 
  pivot_longer(cols = "1981":"2006",
               names_to = "Year",
               values_to = "Permits") |> 
  mutate(Kommune = if_else(Kommune == "Copenhagen", "København", Kommune)) |> 
  left_join(Korrespondancetabel_Kommuner, by = c("Kommune" = "AMT_KOM_TXT")) |> 
  filter(!is.na(NUTS_KODE)) |> 
  select(Year, Permits, NUTS_KODE) |> 
  mutate(Year = as.integer(Year)) |> 
  group_by(Year, NUTS_KODE) |> 
  mutate(Permits = sum(Permits)) |> 
  distinct(Year, NUTS_KODE, .keep_all = TRUE) |> 
  as_tsibble(key = "NUTS_KODE", index = "Year")

Permits_Region_2006_2024 <- read_excel("Data/Permits Region 2006-2024.xlsx", 
                                       skip = 2) 

Permits_Region_2006_2024 = Permits_Region_2006_2024 |> 
  select(-...1,-...2,-...3) |> 
  rename(Kommune = ...4) |> 
  pivot_longer(cols = "2006Q1":"2023Q4",
               names_to = "Year",
               values_to = "Permits") |> 
  mutate(Kommune = if_else(Kommune == "Copenhagen", "København", Kommune),
         Kommune = if_else(Kommune == "Lyngby-Taarbæk", "Lyngby-Tårbæk", Kommune)) |> 
  left_join(Korrespondancetabel_Kommuner, by = c("Kommune" = "NUTS_TXT")) |> 
  select(Year, Permits, NUTS_KODE) |> 
  mutate(Year = as.factor(substr(Year, 1,4)),
         Permits = Permits) |> 
  group_by(Year, NUTS_KODE) |> 
  summarise(Permits = sum(Permits, na.rm = TRUE)) |> 
  mutate(Year = as.character(Year),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "NUTS_KODE", index = "Year") |> 
  filter(Year != "2006")

Permits = Permits_Region_1993_2006 |> 
  bind_rows(Permits_Region_2006_2024)

Disposable_Income <-  read_excel("Data/Disposable Income by region Yearly.xlsx", 
                                 skip = 2) |> 
  select(...3, ...4, "1 Disposable income (2+30-31-32-35)") |> 
  rename(Year = ...4,
         Disp_Income = '1 Disposable income (2+30-31-32-35)',
         Kommune = ...3) |> 
  fill(Kommune) |>
  filter(Disp_Income != is.na(Disp_Income)) |>
  mutate(Year = as.integer(Year)) |> 
  as_tsibble(index = Year, key = "Kommune") |>
  left_join(CPI |> 
              as_tibble() |> 
              select(Year, Index) |> 
              group_by(Year) |> 
              summarise(Index = mean(Index)), by = "Year") |> 
  mutate(Disp_Income_CPI = (Disp_Income / Index)*100,
         log_Disp_Income = log(Disp_Income),
         diff_log_Disp_Income = log_Disp_Income - lag(log_Disp_Income))

Consumer_Confidence <- read_excel("Data/Consumer Confidence - National Monthly.xlsx", 
                                     skip = 2) |> 
  rename(Consumer_Confidence = 'Consumer confidence indicator') |> 
  mutate(Date = seq(as.Date("1974-10-01"), as.Date("2024-02-01"), by = "1 month"),
         Date = yearquarter(Date)) |> 
  select(-...1) |> 
  group_by(Date) |> 
  mutate(Consumer_Confidence = as.integer(Consumer_Confidence)) |> 
  filter(Consumer_Confidence != is.na(Consumer_Confidence)) |> 
  summarise(Consumer_Confidence = mean(Consumer_Confidence)) |> 
  mutate(diff_Consumer_Confidence = Consumer_Confidence - lag(Consumer_Confidence)) |> 
  as_tsibble(index = "Date")

CCI <- read_excel("Data/Construction cost index National Quarterly.xlsx", 
                  skip = 2) |> 
  select(-...1, -...2, -...3, -...4) |> 
  filter(`2003Q1` != is.na(`2003Q1`)) |> 
  pivot_longer(cols = "2003Q1":"2023Q4",
               names_to = "Date",
               values_to = "CCI") |> 
  mutate(Date = yearquarter(Date),
         diff_CCI = CCI - lag(CCI)) |>
  as_tsibble(index = "Date")

Employmet_Rate <- read_excel("Data/Employmet Rate National Quarterly.xls", 
                                 skip = 10) |> 
  rename(Date = observation_date,
         Employment_Rate = LREM64TTDKQ156S) |> 
  mutate(Date = yearquarter(Date),
         diff_Employment_Rate = Employment_Rate - lag(Employment_Rate)) |> 
  as_tsibble(index = Date)

GDP <- read_excel("Data/GDP pr Capita Yearly National.xlsx", 
                      skip = 2) |> 
  select(-...1) |> 
  rename(Year = ...2,
         GDP = 'Pr. capita. Current prices, (1000 DKK.)') |> 
  mutate(Year = as.integer(Year)) |> 
  left_join(CPI |> 
              as_tibble() |> 
              select(Year, Index) |> 
              group_by(Year) |> 
              summarise(Index = mean(Index)), by = "Year") |> 
  filter(Year != is.na(Year)) |> 
  mutate(diff_GDP = GDP - lag(GDP)) |> 
  as_tsibble(index = Year)

Gross_Lending <- read_excel("Data/Mortgage Banks Gross Lending - Quarterly National.xlsx", 
                            skip = 2) |> 
  select(-...1,-...2) |> 
  rename(Date = ...3,
         Gross_Lending = "All loan types") |> 
  mutate(Date = yearquarter(Date),
         diff_Gross_Lending = Gross_Lending - lag(Gross_Lending)) |> 
  as_tsibble(index = "Date")

column_names <- as.character(1993:2023)
Key_for_Regions <- read_excel("Data/Key for Regions.xlsx") |> 
  rename(Kom.nr = NUTS_KODE,
         Kommune = NUTS_TXT) |> 
  select(Kom.nr, Kommune) |> 
  distinct(Kom.nr, .keep_all = TRUE)


Grundskyld <- read_excel("Data/Grundskylds_Promille Regional Yearly.xlsx") |> 
  slice(-c(1, 2,101:113)) |> 
  mutate(across(all_of(column_names), as.double)) |> 
  pivot_longer(cols = column_names,
               names_to = "Year",
               values_to = "Grundskyld") |> 
  select(-'2024') |> 
  left_join(Key_for_Regions, by = c("Kom.nr" = "Kom.nr")) |> 
  select(-...1) |> 
  mutate(Year = as.integer(Year),
         Kommune = case_when(Kom.nr == 715 ~ "Aarhus",
                             Kom.nr != 715 ~ Kommune)) |> 
  as_tsibble(key = "Kommune", index = Year)


Household <- read_excel("Data/Households per region Annualy.xlsx", 
                             skip = 2) |> 
  rename(Year = ...1) |> 
  mutate(Year = as.integer(Year)) |> 
  pivot_longer("Copenhagen":"Aalborg",
               names_to = "Kommune",
               values_to = "Households") |> 
  group_by(Kommune) |> 
  mutate(log_Households = log(Households),
         diff_log_Households = log_Households - lag(log_Households,1)) |> 
  as_tsibble(key = "Kommune", index = "Year")

Houses_sold_raw_1 <- read_excel("Data/House Market by area - 2004-2007 Regional monthly.xlsx", 
                                skip = 2)

Houses_sold_raw_2 <- read_excel("Data/House Market by area - 2008-2024 Regional monthly.xlsx", 
                                skip = 2)

Houses_for_sale <- Houses_sold_raw_1 |> 
  select(-...1,-...2) |> 
  rename(Kommune = ...3) |> 
  pivot_longer(cols = "2004M01":"2007M12",
               names_to = "Date",
               values_to = "Houses_for_sale") |> 
  bind_rows(Houses_sold_raw_2 |> 
              select(-...1,-...2) |> 
              rename(Kommune = ...3) |> 
              pivot_longer(cols = "2008M01":"2024M02",
                           names_to = "Date",
                           values_to = "Houses_for_sale")) |> 
  mutate(Date = yearquarter(Date)) |> 
  group_by(Kommune, Date) |> 
  summarise(Houses_for_sale = mean(Houses_for_sale)) |> 
  mutate(diff_Houses_for_sale = Houses_for_sale - lag(Houses_for_sale)) |> 
  as_tsibble(key = "Kommune", index = Date)

Invandring_raw <- read_excel("Data/Invandring Regional Quarter.xlsx", 
                             skip = 2)
Indvandring <- Invandring_raw |> 
  filter(Copenhagen != is.na(Copenhagen)) |> 
  mutate(Date = seq(as.Date("2007-04-01"), as.Date("2023-12-01"), by = "1 quarter"),
         Date = yearquarter(Date)) |> 
  pivot_longer("Copenhagen":"Aalborg",
               names_to = "Kommune",
               values_to = "Immigration") |> 
  select(-...1) |> 
  group_by(Kommune) |> 
  mutate(diff_Immigration = Immigration - lag(Immigration)) |> 
  as_tsibble(key = "Kommune", index = "Date")

Population_raw <- read_excel("Data/Befolkning by Region 1993 - 2023.xlsx", 
                                             skip = 2)

Population <- Population_raw |> 
  select(-...1) |> 
  pivot_longer(, cols = "1993":"2024",
               names_to = "Year",
               values_to = "Population") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Density_raw <- read_excel("Data/Befolknings Tæthed by Region 1993 - 2023.xlsx",
                          skip = 2)

Density <- Density_raw |> 
  select(-...1, -"2024") |> 
  pivot_longer(, cols = "1993":"2023",
               names_to = "Year",
               values_to = "Density") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Andel_Ejerboliger_raw <- read_excel("Data/Andel Ejerboliger Region Yearly 1993-2024.xlsx", 
              skip = 2)

Andel_Ejerboliger <- Andel_Ejerboliger_raw |> 
  mutate('2010' = as.double('2010')) |> 
  select(-...1, -"2024", -"2022", -"2023") |> 
  pivot_longer(, cols = "1993":"2021",
               names_to = "Year",
               values_to = "Andel_Ejerboliger") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Anmeldte_indbrud_raw <- read_excel("Data/Anmeldte indbryd Region Yearly 1993-2024.xlsx", 
           skip = 2)

Anmeldte_indbrud <- Anmeldte_indbrud_raw |> 
  select(-...1, -"2024", -"2023") |> 
  pivot_longer(, cols = "1993":"2022",
               names_to = "Year",
               values_to = "Anmeldte_indbrud") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Anmeldte_voldsforbrydelser_raw <- read_excel("Data/Anmeldte voldsforbrydelser Region Yearly 1993-2024.xlsx", 
              skip = 2)

Anmeldte_voldsforbrydelser <- Anmeldte_voldsforbrydelser_raw |> 
  mutate(across(matches('^(199[3-9]|20[0-1][0-9]|202[0-3])$'), as.double))|> 
  select(-...1, -"2024", -"2023") |> 
  pivot_longer(, cols = "1993":"2022",
               names_to = "Year",
               values_to = "Anmeldte_voldsforbrydelser") |> 
  filter(!is.na(Kom.nr)) |>
  mutate(Kom.nr = as.double(Kom.nr),
         Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Price_to_Income_Ratio_raw <- read_excel("Data/Price to Income Ratio - National Quarterly.xlsx", 
                                        skip = 5)

Price_to_Income_Ratio <- Price_to_Income_Ratio_raw |> 
  select(...3) |> 
  rename(PTIR = ...3) |> 
  filter(PTIR != is.na(PTIR)) |> 
  mutate(Date = seq(as.Date("1981-01-01"), as.Date("2023-09-01"), by = "1 quarter"),
         Date = yearquarter(Date),
         diff_PTIR = PTIR - lag(PTIR)) |> 
  as_tsibble(index = Date)

Price_to_Rent_ratio_raw <- read_excel("Data/Price to Rent ratio National Quarterly.xlsx", 
                                      skip = 5)

Price_to_Rent_ratio <- Price_to_Rent_ratio_raw |> 
  select(-...2,-...4) |> 
  rename(PTRR = ...3) |> 
  filter(PTRR != is.na(PTRR)) |> 
  mutate(Date = seq(as.Date("1970-01-01"), as.Date("2023-08-08"), by = "1 quarter")) |> 
  select(PTRR, Date) |> 
  mutate(Date = yearquarter(Date),
         diff_PTRR = PTRR - lag(PTRR)) |> 
  as_tsibble(index = Date)

Rent_Prices_raw <- read_excel("Data/Rent Prices National Quarterly.xlsx", 
                              skip = 5)

Rent_Prices <- Rent_Prices_raw |> 
  select(-...2,-...4) |> 
  rename(Rent_Price = ...3) |> 
  filter(Rent_Price != is.na(Rent_Price)) |> 
  mutate(Date = seq(as.Date("1967-01-01"), as.Date("2024-01-01"), by = "1 quarter")) |> 
  select(Rent_Price, Date) |> 
  mutate(Date = yearquarter(Date),
         diff_Rent_Price = Rent_Price - lag(Rent_Price)) |> 
  as_tsibble(index = Date)

Vacancy_raw <- read_excel("Data/Vacant dwellings Regional Yearly.xlsx", 
                          skip = 2)

Vacant_Houses <- Vacancy_raw |> 
  select(-...1) |> 
  rename(Kommune = ...2) |> 
  filter(Kommune != is.na(Kommune)) |> 
  pivot_longer(cols = "2010":"2023",
               names_to = "Year",
               values_to = "Vacant_Houses") |> 
  group_by(Kommune) |> 
  mutate(Year = as.integer(Year),
         diff_Vacant_Houses = Vacant_Houses - lag(Vacant_Houses)) |> 
  ungroup() |> 
  as_tsibble(key = "Kommune", index = "Year")

Kommune_ID <- read_excel("Data/Kommune-ID.xlsx") |> 
  rename(Kommune = Kommune...1,
         Kommune_2 = Kommune...3)

Udskrivningsprocent_raw <- read_excel("Data/Udskrivningsprocent Region Yearly 1993-2024.xlsx", 
                                                          skip = 2)

Udskrivningsprocent <- Udskrivningsprocent_raw |> 
  select(-...1, -"2024") |> 
  filter(!is.na(Kom.nr)) |> 
  mutate(across(where(is.character), as.numeric)) |> 
  pivot_longer(, cols = "1993":"2023",
               names_to = "Year",
               values_to = "Udskrivningsprocent") |> 
  mutate(Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Udgift_til_dagtilbud_raw <- read_excel("Data/Udgift til dagtilbud Region Yearly 1993-2024.xlsx", 
                                                           skip = 2)

Udgift_til_dagtilbud <- Udgift_til_dagtilbud_raw |> 
  select(-...1, -"2024") |> 
  filter(!is.na(Kom.nr)) |> 
  mutate(across(where(is.character), as.numeric)) |> 
  pivot_longer(, cols = "1993":"2023",
               names_to = "Year",
               values_to = "Udgift_til_dagtilbud") |> 
  mutate(Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Socioøkonomiske_indeks_raw <- read_excel("Data/Socioøkonomiske indeks Region Yearly 1996-2024.xlsx",
                                         skip = 2)

Socioøkonomiske_indeks <- Socioøkonomiske_indeks_raw |> 
  select(-...1, -"2024") |> 
  filter(!is.na(Kom.nr)) |> 
  mutate(across(where(is.character), as.numeric)) |> 
  pivot_longer(, cols = "1993":"2023",
               names_to = "Year",
               values_to = "Socioøkonomiske_indeks") |> 
  mutate(Year = as.integer(Year)) |> 
  as_tsibble(key = "Kom.nr", index = "Year")

Realkreditudlån_1993_2013 <- read_excel("Data/Realkreditudlån 1993-2013 Monthly.xlsx", 
                                                skip = 2)

Realkreditudlån_1 = Realkreditudlån_1993_2013 |> 
  select(-...1, -...2, -...3) |> 
  rename("Month" = '...4',
         'Udlån' = 'Alle løbetider/uspecificeret') |> 
  filter(!is.na(Udlån)) |> 
  mutate(Date = seq(as.Date("1993-01-01"), as.Date("2013-10-01"), by = "1 month"),
                  Date = yearquarter(Date)) |> 
  select(-Month)

Realkreditudlån_2013_2023 <- read_excel("Data/Realkreditudlån 2013 - 2023 Monthly.xlsx", 
                                        skip = 2)
  
Realkreditudlån_2 = Realkreditudlån_2013_2023 |> 
  select(-...1, -...2, -...3, -...4, -...5, -...6) |> 
  rename("Month" = '...7',
         'Udlån' = 'I alt') |> 
  filter(Udlån != '..') |> 
  mutate(Date = seq(as.Date("2013-10-01"), as.Date("2022-12-01"), by = "1 month"),
         Date = yearquarter(Date),
         Udlån = as.double(Udlån)) |> 
  select(-Month)

Realkreditudlån_2022_2024 <- read_excel("Data/Realkreditudlån 2022 - 2024 Monthly.xlsx", 
                                                skip = 2)

Realkreditudlån_3 = Realkreditudlån_2022_2024 |> 
  select(-...1, -...2, -...3, -...4, -...5, -...6) |> 
  rename("Month" = '...7',
         'Udlån' = `Ejerbolig og fritidshuse`) |> 
  filter(Udlån != '..') |> 
  mutate(Date = seq(as.Date("2022-12-01"), as.Date("2024-02-01"), by = "1 month"),
         Date = yearquarter(Date)) |> 
  select(-Month)
  
Realkreditudlån = Realkreditudlån_1 |> 
  bind_rows(Realkreditudlån_2) |> 
  bind_rows(Realkreditudlån_3) |> 
  group_by(Date) |>
  summarise(Udlån = mean(Udlån)) |> 
  as_tsibble(index = "Date")

Interest_rates = read_excel("Data/Udlåns rente Monthly.xlsx", 
                                   skip = 2) |> 
  select(-...1,-...2) |> 
  rename(Rate = Månedsultimo) |>
  filter(Rate != "..") |> 
  mutate(Date = seq(as.Date("1992-4-01"), as.Date("2024-02-01"), by = "1 month"),
         Date = yearquarter(Date)) |>
  mutate(Rate = as.double(Rate)) |> 
  filter(Rate != is.na(Rate)) |> 
  group_by(Date) |> 
  summarise(Rate = mean(Rate)) |> 
  mutate(diff_Rate = Rate - lag(Rate)) |> 
  as_tsibble(index = "Date")


Ejendomspriser <- Ejendomspriser |> 
  left_join(Key_for_Regions, by = "Kommune") |> 
  mutate(Kom.nr = case_when(Kommune == "Århus" ~ 751,
                            Kommune != "Århus" ~ Kom.nr)) |> 
  left_join(Kommune_ID |> select(Kommune_2, Kom.nr), by = "Kom.nr") |> 
  left_join(Disposable_Income, by = c("Kommune_2" = "Kommune", "Year")) |> 
  left_join(Consumer_Confidence, by ="Date") |> 
  left_join(CCI, by = "Date") |> 
  left_join(Employmet_Rate, by = "Date") |> 
  left_join(GDP, by = "Year") |> 
  left_join(Gross_Lending, by = "Date") |>
  left_join(Grundskyld, by = c("Kommune", "Year")) |> 
  left_join(Household, by = c("Kommune_2" = "Kommune", "Year")) |> 
  left_join(Houses_for_sale, by = c("Kommune_2" = "Kommune", "Date")) |>
  left_join(Indvandring, by = c("Kommune_2" = "Kommune", "Date")) |>
  left_join(Population, by = c("Kom.nr.x" = "Kom.nr", "Year")) |>
  left_join(Price_to_Income_Ratio, by = "Date") |>
  left_join(Vacant_Houses, by = c("Kommune", "Year")) |>
  left_join(Price_to_Rent_ratio, by = "Date") |>
  left_join(Rent_Prices, by = "Date") |> 
  left_join(Anmeldte_voldsforbrydelser, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Anmeldte_indbrud, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Andel_Ejerboliger, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Density, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Udskrivningsprocent, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Udgift_til_dagtilbud, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Socioøkonomiske_indeks, by = c("Kom.nr.x" = "Kom.nr", "Year")) |> 
  left_join(Realkreditudlån, by = "Date") |> 
  left_join(Interest_rates, by = "Date") |> 
  left_join(Permits, by = c("Year", "Kom.nr.x" = "NUTS_KODE")) |> 
  select(-Index.y, -Index.x, -Kom.nr.y)
```

# Introduction

The goal of this paper is to forecast real growth in house prices for municipalities in Denmark.

Outlined by National Bankens paper from 2021 *"Housing Market Robustness Should be Strengthened",* the Covid-19 pandemic lead to a rapid price increases for housing despite the economic downturn in the same period. The paper exemplifies the regional disparities, regions such as Copenhagen, Aarhus have seen more significant price increases as well as increased lending activity. This highlights heterogeneity across municipalities and the possibility of regional bubbles forming particular in more densely populated areas. In general these price increases outpaces the income level of the average dane, such development imposes several risks for the economy, 1) households taken on larger level of debt to sustain purchasing, 2) speculative behavior as inventors hope to capitalize on continuous growth, 3) A self-fulfilling prophecy where an expectation of future price increases leads to an increase of future prices.

In the event that house prices does not grow or interest rates rises, the increased level of debt and speculative behavior might result in strong market correction leading to a decrease in house prices, making the general economy more susceptible to shocks.

This serves as motivation for the problem of forecasting house growth for the period of the next 5 to 10 years, in particular the house growth for individual municipalities.

# Data

## House Prices

House prices are collected from "Statiskbanken", prices are collected quarterly and spans from 1992 to 2023. The unit of measurement is *kr pr m2,* prices are calculated at the individual house level and then summarized at a municipality level, the published data is then the weighted average price for each municipality.

The house prices have been adjusted for inflation, by taking the monthly consumer price index for housing published by Statistics Denmark.

```{r echo=FALSE, warning=FALSE}
#| label: average-growth rate
#| fig-cap: "Average growth rate for real m2 prices in Denmark"

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  ggplot(aes(x = Date, y = Growth_rate)) +
  geom_line() + # Overall growth rate
  geom_line(data = Ejendomspriser |> 
              filter(Kommune == c("København", "Kalundborg")),
            aes(x = Date, y = Growth_rate, col = Kommune),
            alpha = .4) + 
  theme_minimal() + 
  labs(
    title = "",
    x = "",
    y = ""
  ) +
  theme(legend.position="top")
```

Figure 1 depicts the average growth rate for two different municipalities and the aggregated average growth rate for the all municipalities, the figure suggest a similar trend across all municipalities this can be explained by similar macroeconomic trends in the economy.

## Variables

Motivation for the explanatory variables chosen comes from "Chapter 9 - Forecasting Real Estate Prices" These variables can be categorized into four categories.

1.  Demand for real estate

2.  Supply of real estate

3.  Construction sector

4.  Property Market

A comprehensive list of all included variables can be found in the appendix along side their appropriate transformation.

# Method

A big decision about the quantity of models to choose, the data set contains 93 danish municipalities. Each of these municipalities is there own time series for which one can model and forecast, the question becomes if one should run a single model for all municipalities or model 93 specific models.

Because of the long cyclical behavior an extending window is used over a rolling window for forecasting. There is three general models the first is a simple baseline model used as a comparison for more complex models, for the baseline model an auto regressive model is chosen, the general idea is to see how well past growth in house prices are able to forecast future house prices. The second model is a theoretical model encompassing explanatory variables motivated by historical papers forecasting house prices for this model a VAR model is chosen. Lastly a model making use as a state of the art machine learning, here a model with and without explanatory variables to see the general performance here XGBoost will be used.

```{r}

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |>
  autoplot() +
  theme_minimal() +
  labs(
    y = "",
    x = ""
  )

```

```         
```

A visual analysis of figure 1 indicates that since 1992 the average growth rate has been between 6% and minus 6% quarter to quarter.

```{r echo=FALSE, warning=FALSE}
#| label: average-growth rate decomposition
#| fig-cap: "STL decomposition of the average growth rate for real m2 prices in Denmark"

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  model(stl = STL(Growth_rate)) |> 
  components() |> 
  autoplot() +
  theme_minimal() +
  labs(
    title = "",
    subtitle = "",
    x = ""
  )

```

Visual inspection implies a seasonality in real growth rates. Trend is constant over time, this implies the need of accounting for seasonality in our proposed models.

```{r echo=FALSE, warning=FALSE}
#| label: growth rate trend and season
#| fig-cap: "Real growth rates seasonaly adjusted (red) and trend (black)"

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  model(stl = STL(Growth_rate)) |> 
  components() |> 
  ggplot(aes(x = Date)) +
  geom_line(aes(y = season_adjust), col = "red") +
  geom_line(aes(y = Growth_rate), alpha = .4) +
  geom_line(aes(y = trend)) +
  theme_minimal() +
  labs(
    y = "",
    x = ""
  )

```

```{r}

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  features(Growth_rate, unitroot_kpss)
```

From the augmented Dickey Fueller test, we can statistically reject the null hypothesis, and conclude that our Growth_rate are stationary.

```{r}
Ejendomspriser |> 
  features(Growth_rate, unitroot_kpss)
```

The same results holds for each individual time series. Let us take a look at the autocorrelation, and partial autocorrelation of our series.

```{r}

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  ACF(Growth_rate) |> 
  autoplot()

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  PACF(Growth_rate) |> 
  autoplot()
  

```

From the our ACF plot we see a fast decrease from the first, lag to the fourth lag. This is not exactly as exponential as one might expect, ad we see that lag 14 and 18 are significant as well. The PACF is significant at the first lag and nearly not significant. With the idea of making a model as a simple as possible, an ARIMA(4,0,0) model seems relatively appropriate.

```{r}

Ejendomspriser |> 
  filter(Kommune == "København") |> 
  ACF(Growth_rate) |> 
  autoplot()

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  PACF(Growth_rate) |> 
  autoplot()
```

# Forecast

Let us do our first forecast, for this we will be making use of a extending window.

```{r}


W = 30
i = 0
j = 
E = Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  nrow()

Ejendomspriser_tbl <- Ejendomspriser %>%
    as_tibble() %>%
    group_by(Date) %>%
    summarise(Growth_rate = mean(Growth_rate, na.rm = TRUE)) %>%
    filter(!is.na(Growth_rate)) %>%
    as_tsibble(index = Date)

fc <- vector("list", length = E-W)

for(i in 2:(E-W)) {
    fc[[i]] <- Ejendomspriser_tbl %>%
        slice(1:(W+i-1)) %>%
        model(ARMA_400 = ARIMA(Growth_rate ~ pdq(4,0,0)),
              ARMA_100 = ARIMA(Growth_rate ~ pdq(1,0,0))) %>%
        forecast(h = 1) %>%
        as_tibble()
}

fc_combined <- bind_rows(fc)

fc_combined |> 
  bind_cols(Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  slice((W+1):E) |> 
  select(Growth_rate)) |> 
  rename(Truth = Growth_rate...5,
         Forecast = .mean) |> 
  select(.model, Forecast, Truth) |> 
  yardstick::rmse(Truth, Forecast)

```

```{r echo=FALSE, warning=FALSE}

Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  ACF(Growth_rate, 12) |> 
  ggplot(aes(x = lag, y = acf)) +
  geom_point()

```

```{r}

W = 30
i = 0
j = 
E = Ejendomspriser |> 
  as.tibble() |> 
  group_by(Date) |> 
  summarise(Growth_rate = mean(Growth_rate)) |> 
  filter(Growth_rate != is.na(Growth_rate)) |> 
  as_tsibble(index = Date) |> 
  nrow()

fc <- vector("list", length = E-W)

for(i in 1:(E-W)) {
  
  fc[[i]] <- Ejendomspriser |> 
  group_by(Kommune) |> 
  slice(1:(29+i)) |> 
  ungroup() |> 
  filter(!is.na(Growth_rate)) |> 
  select(Kommune, Date, Growth_rate) |> 
  as_tsibble(key = Kommune, index = Date) |>
  model(ARIMA_400 = ARIMA(Growth_rate ~ pdq(3,0,0) + PDQ(0,0,0))) |> 
  forecast(h = 1) |> 
  as_tibble()
  
}


```

RMSE for every single municipality using an extending window and the model ARIMA(3,0,0)

```{r}

fc <- bind_rows(fc) |> 
  arrange(Kommune, Date)

fc <- left_join(fc, Ejendomspriser |> select(Kommune, Date, Growth_rate), by = c("Kommune", "Date")) |> select(Kommune, .model, Date, .mean, Growth_rate.y)

fc |> 
  select(Kommune,.mean, Growth_rate.y) |> 
  group_by(Kommune) |> 
  yardstick::rmse(Growth_rate.y, .mean)

```

Let us try to compare two different models, both are ARMA models

```{r}

registerDoParallel(cores = 6)

W <- 30
E <- Ejendomspriser %>% filter(Kommune == "Aabenraa") %>% nrow()

# Prepare a list to store the forecasts
fc <- vector("list", length = E-W)

# Use foreach to iterate in parallel
fc <- foreach(i = 1:(E-W), .packages = c("dplyr", "tsibble", "fable", "fabletools")) %dopar% {
  Ejendomspriser %>% 
    group_by(Kommune) %>% 
    slice(1:(29+i)) %>% 
    ungroup() %>% 
    filter(!is.na(Growth_rate)) %>% 
    select(Kommune, Date, Growth_rate) %>% 
    as_tsibble(key = Kommune, index = Date) %>%
    model(ARIMA_400 = ARIMA(Growth_rate ~ pdq(3,0,0) + PDQ(0,0,0)),
          ARIMA_100 = ARIMA(Growth_rate ~ pdq(1,0,0) + PDQ(0,0,0))) %>% 
    forecast(h = 1) %>% 
    as_tibble()
}

```

```{r}

fc <- bind_rows(fc) |> 
  arrange(Kommune, Date)

fc <- left_join(fc, Ejendomspriser |> select(Kommune, Date, Growth_rate), by = c("Kommune", "Date")) |> select(Kommune, .model, Date, .mean, Growth_rate.y)

fc |> 
  select(Kommune,.model, .mean, Growth_rate.y) |> 
  group_by(Kommune, .model) |> 
  yardstick::rmse(Growth_rate.y, .mean)

fc |> 
  select(Kommune,.model, .mean, Growth_rate.y) |> 
  group_by(Kommune, .model) |> 
  yardstick::rmse(Growth_rate.y, .mean) |> 
  ungroup() |> 
  select(.model, .estimate) |> 
  mutate(.model = as.factor(.model)) |> 
  group_by(.model) |> 
  summarise(RMSE_mean = mean(.estimate))

```

Interestingly it seems that the RMSE seems to be lower for the ARIMA_100 model. But now we have a way to run the model on all of my time series and then compare which performs the best! Let us try with a VAR model. Let us take a look at our explanatory variables, and see which one has data available.

```{r}

data_availability <- Ejendomspriser %>%
  gather(key = "variable", value = "value", -date) %>%
  group_by(date, variable) %>%
  summarise(has_data = !any(is.na(value)))

# Pivot wider to see a more intuitive format with dates as rows and variables as columns
availability_wide <- data_availability %>%
  pivot_wider(names_from = variable, values_from = has_data)

# Print the dates and their corresponding data availability for each variable
print(availability_wide)
```

```{r}

registerDoParallel(cores = 6)

W <- 30
E <- Ejendomspriser %>% filter(Kommune == "Aabenraa") %>% nrow()

# Prepare a list to store the forecasts
fc_var <- vector("list", length = E-W)

# Use foreach to iterate in parallel
fc_var <- foreach(i = 1:(E-W), .packages = c("dplyr", "tsibble", "fable", "fabletools")) %dopar% {
  Ejendomspriser %>% 
    group_by(Kommune) %>% 
    slice(1:(29+i)) %>% 
    ungroup() %>% 
    filter(!is.na(Growth_rate)) %>% 
    as_tsibble(key = Kommune, index = Date) %>%
    model(VAR = VAR(vars(Growth_rate, diff_Rate, diff_log_Disp_Income))) %>% 
    forecast(h = 1) %>% 
    as_tibble()
}


```

```         
```

# Conclusion

asdasd

```{r}
#| echo: false
2 * 2
```
